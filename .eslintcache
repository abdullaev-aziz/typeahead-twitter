[{"D:\\docs\\twitter-typeahead\\src\\index.js":"1","D:\\docs\\twitter-typeahead\\src\\App.js":"2","D:\\docs\\twitter-typeahead\\src\\components\\Compose.js":"3","D:\\docs\\twitter-typeahead\\src\\components\\ProfileHeader.js":"4","D:\\docs\\twitter-typeahead\\src\\components\\TwitEditor.js":"5","D:\\docs\\twitter-typeahead\\src\\constants\\constants.js":"6","D:\\docs\\twitter-typeahead\\src\\utils\\extractUserData.js":"7","D:\\docs\\twitter-typeahead\\src\\utils\\getCurrentWordAt.js":"8","D:\\docs\\twitter-typeahead\\src\\components\\ErrorBoundary.js":"9","D:\\docs\\twitter-typeahead\\src\\utils\\fetchTwitterUsers.js":"10","D:\\docs\\twitter-typeahead\\src\\components\\UserSuggestions.js":"11","D:\\docs\\twitter-typeahead\\src\\components\\UserItem.js":"12","D:\\docs\\twitter-typeahead\\src\\constants\\api_routes.js":"13"},{"size":219,"mtime":1610434208423,"results":"14","hashOfConfig":"15"},{"size":181,"mtime":1610513652925,"results":"16","hashOfConfig":"15"},{"size":590,"mtime":1610514009610,"results":"17","hashOfConfig":"15"},{"size":405,"mtime":1615401587749,"results":"18","hashOfConfig":"15"},{"size":6558,"mtime":1610516782212,"results":"19","hashOfConfig":"15"},{"size":772,"mtime":1615401569125,"results":"20","hashOfConfig":"15"},{"size":564,"mtime":1610503639607,"results":"21","hashOfConfig":"15"},{"size":1330,"mtime":1610506706198,"results":"22","hashOfConfig":"15"},{"size":665,"mtime":1610513798388,"results":"23","hashOfConfig":"15"},{"size":399,"mtime":1615401371733,"results":"24","hashOfConfig":"15"},{"size":636,"mtime":1610515903417,"results":"25","hashOfConfig":"15"},{"size":546,"mtime":1610515949936,"results":"26","hashOfConfig":"15"},{"size":66,"mtime":1615402570735,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"lxnurx",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"D:\\docs\\twitter-typeahead\\src\\index.js",[],["57","58"],"D:\\docs\\twitter-typeahead\\src\\App.js",[],"D:\\docs\\twitter-typeahead\\src\\components\\Compose.js",[],"D:\\docs\\twitter-typeahead\\src\\components\\ProfileHeader.js",["59"],"import React from \"react\";\r\nimport \"../styles/ProfileHeader.css\";\r\n\r\nfunction ProfileHeader({ user }) {\r\n  const { name, screen_name, profile_image_url } = user;\r\n  return (\r\n    <div className=\"profile-header\">\r\n      <img alt=\"profile-image\" src={profile_image_url} />\r\n      <span className=\"name\">{name}</span>\r\n      <span>@{screen_name}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileHeader;\r\n","D:\\docs\\twitter-typeahead\\src\\components\\TwitEditor.js",["60","61","62"],"import _ from \"lodash\";\r\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport {\r\n  MAX_TWIT_LENGTH_ALLOWED,\r\n  MAX_SUGGESTIONS_ALLOWED,\r\n  COMPOSEBOX_PLACEHOLDER,\r\n  TYPEAHEAD_TRIGGER,\r\n  DEBOUNCE_DELAY,\r\n  QUERY_THRESHOLD,\r\n  KEYCODE_MAPPER,\r\n} from \"../constants/constants\";\r\nimport { getCurrentWordAt } from \"../utils/getCurrentWordAt\";\r\nimport fetchTwitterUsers from \"../utils/fetchTwitterUsers\";\r\nimport { extractUserData } from \"../utils/extractUserData\";\r\nimport UserSuggestions from \"./UserSuggestions\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\nimport \"../styles/TwitEditor.css\";\r\n\r\n\r\nfunction RefactoredEditor({ cacheObj }) {\r\n  const twitArea = useRef();\r\n  const { cache, setCache } = cacheObj;\r\n  const [twit, setTwit] = useState(\"\");\r\n  const [charactersLeft, setCharactersLeft] = useState(MAX_TWIT_LENGTH_ALLOWED);\r\n  const [currentWordObj, setCurrentWordObj] = useState({});\r\n  const [currentCursorPosition, setCurrentCursorPosition] = useState(0);\r\n  const [queryObj, setQueryObject] = useState({});\r\n  const [suggestedMentions, setSuggestedMentions] = useState([]);\r\n  //store index of mention\r\n  const [selectedMention, setSelectedMention] = useState(0);\r\n\r\n  function updateCursorPosition(newPos) {\r\n    setCurrentCursorPosition(newPos);\r\n  }\r\n  /**\r\n   * event listeners\r\n   */\r\n\r\n  //update twit in textarea\r\n  const handleChange = (e) => {\r\n    const text = e.target.value;\r\n    setTwit(text);\r\n    updateCursorPosition(e.target.selectionEnd);\r\n  };\r\n\r\n  //update current word on mouse click in textarea\r\n  const handleClick = (e) => {\r\n    updateCursorPosition(e.target.selectionEnd);\r\n  };\r\n\r\n\r\n  //handle arrow keys navigation\r\n  const handleKeyDown = (e) => {\r\n    const { keyCode } = e;\r\n    //if keyCode is valid{left, right, up, down, enter keys} then trigger the specific action\r\n    if (keyCode in KEYCODE_MAPPER) {\r\n      const KEY = KEYCODE_MAPPER[keyCode];\r\n      if (KEY === \"left\") {\r\n        //go one symbol to the left and updates the cursor position\r\n        const newPos =\r\n          currentCursorPosition === 0 ? 0 : currentCursorPosition - 1;\r\n        updateCursorPosition(newPos);\r\n      } else if (KEY === \"right\") {\r\n        const newPos =\r\n          currentCursorPosition === twit.length\r\n            ? twit.length\r\n            : currentCursorPosition + 1;\r\n        updateCursorPosition(newPos);\r\n      } else {\r\n        //prevent default behaviour for enter, up & down keys\r\n        e.preventDefault();\r\n        //up & down arrow navigation\r\n        let selected = selectedMention || 0;\r\n        const len = suggestedMentions.length;\r\n        if (KEY === \"up\") {\r\n          if (selected < 0) selected = 0;\r\n          selected = (len + (selected - 1)) % len;\r\n          setSelectedMention(selected);\r\n        } else if (KEY === \"down\") {\r\n          selected = (selected + 1) % len;\r\n          setSelectedMention(selected);\r\n        } else {\r\n          //key enter\r\n          addMention();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  //add @mention\r\n  //will also be passed as props to UserSuggestions -> UserItem\r\n  function addMention(suggestedMention) {\r\n    const preMention = twit.slice(0, queryObj.startPos);\r\n    const postMention = twit.slice(queryObj.endPos, twit.length);\r\n    const mention =\r\n      suggestedMention ||\r\n      (suggestedMentions.length > 0\r\n        ? suggestedMentions[selectedMention].screen_name\r\n        : currentWordObj.currentWord);\r\n    const newTwit = preMention + TYPEAHEAD_TRIGGER + mention + postMention;\r\n    setTwit(newTwit);\r\n    twitArea.current.focus();\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCharactersLeft(MAX_TWIT_LENGTH_ALLOWED - twit.length);\r\n  }, [twit]);\r\n\r\n  useEffect(() => {\r\n    setCurrentWordObj(getCurrentWordAt(currentCursorPosition, twit));\r\n  }, [currentCursorPosition]);\r\n\r\n  //update query\r\n  useEffect(() => {\r\n    const wordObj = currentWordObj;\r\n    let { currentWord } = wordObj;\r\n    if (\r\n      currentWord &&\r\n      currentWord.startsWith(TYPEAHEAD_TRIGGER) &&\r\n      currentWord.length > 2\r\n    ) {\r\n      currentWord = currentWord.toLowerCase();\r\n      //leave alphanumeric, _, - symbols\r\n      currentWord = currentWord.replace(/[^0-9a-z-_]/gi, \"\");\r\n      wordObj.currentWord = currentWord;\r\n      setQueryObject(wordObj);\r\n    }\r\n    return () => setQueryObject({});\r\n  }, [currentWordObj]);\r\n\r\n  /**\r\n   * useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed.\r\n   * useCallback was added so debouncedSearch wouldn't be reinitialized on every rerender\r\n   */\r\n  const debouncedApiSearchAndCache = useCallback(\r\n    _.debounce((query) => searchAPI(query), DEBOUNCE_DELAY),\r\n    []\r\n  );\r\n\r\n  function searchAPI(query) {\r\n    fetchTwitterUsers(query)\r\n      .then((users) => {\r\n        return users\r\n          .slice(0, MAX_SUGGESTIONS_ALLOWED)\r\n          .map((user) => extractUserData(user));\r\n      })\r\n      .then((firstTenUsers) => {\r\n        const extractedUsers = firstTenUsers.map((user) =>\r\n          extractUserData(user)\r\n        );\r\n        return extractedUsers;\r\n      })\r\n      .then((convertedUsers) => {\r\n        setSuggestedMentions(convertedUsers);\r\n        cache[query] = convertedUsers;\r\n        setCache(cache);\r\n        setSuggestedMentions(cache[query]);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    //search cache\r\n    const query = queryObj.currentWord;\r\n    if (!query || query.length < QUERY_THRESHOLD) {\r\n      return setSuggestedMentions([]);\r\n    }\r\n    if (cache.hasOwnProperty(query)) {\r\n      console.log(\"Fetching from cache...\");\r\n      setSuggestedMentions(cache[query]);\r\n    } else {\r\n      console.log(\"Fetching from Twitter API...\");\r\n      debouncedApiSearchAndCache(query);\r\n    }\r\n  }, [queryObj]);\r\n\r\n  useEffect(() => {\r\n    setSelectedMention(0);\r\n  }, [suggestedMentions]);\r\n\r\n  return (\r\n    <div className=\"twit-editor\">\r\n      <textarea\r\n        ref={twitArea}\r\n        value={twit}\r\n        placeholder={COMPOSEBOX_PLACEHOLDER}\r\n        onChange={(e) => handleChange(e)}\r\n        onKeyDown={(e) => handleKeyDown(e)}\r\n        onClick={(e) => handleClick(e)}\r\n      />\r\n      <div className=\"characters-left\">{charactersLeft}</div>\r\n      <ErrorBoundary>\r\n        <>\r\n          {queryObj.currentWord && suggestedMentions && (\r\n            <UserSuggestions\r\n              results={suggestedMentions}\r\n              selected={selectedMention}\r\n              addMention={addMention}\r\n            />\r\n          )}\r\n        </>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RefactoredEditor;\r\n","D:\\docs\\twitter-typeahead\\src\\constants\\constants.js",[],"D:\\docs\\twitter-typeahead\\src\\utils\\extractUserData.js",[],"D:\\docs\\twitter-typeahead\\src\\utils\\getCurrentWordAt.js",[],"D:\\docs\\twitter-typeahead\\src\\components\\ErrorBoundary.js",[],"D:\\docs\\twitter-typeahead\\src\\utils\\fetchTwitterUsers.js",[],"D:\\docs\\twitter-typeahead\\src\\components\\UserSuggestions.js",[],"D:\\docs\\twitter-typeahead\\src\\components\\UserItem.js",[],"D:\\docs\\twitter-typeahead\\src\\constants\\api_routes.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":8,"column":7,"nodeType":"69","endLine":8,"endColumn":58},{"ruleId":"70","severity":1,"message":"71","line":111,"column":6,"nodeType":"72","endLine":111,"endColumn":29,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":135,"column":38,"nodeType":"75","endLine":135,"endColumn":49},{"ruleId":"70","severity":1,"message":"76","line":174,"column":6,"nodeType":"72","endLine":174,"endColumn":16,"suggestions":"77"},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'twit'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentWordObj' needs the current value of 'twit'.","ArrayExpression",["80"],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","React Hook useEffect has missing dependencies: 'cache' and 'debouncedApiSearchAndCache'. Either include them or remove the dependency array.",["81"],"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [currentCursorPosition, twit]",{"range":"86","text":"87"},"Update the dependencies array to be: [cache, debouncedApiSearchAndCache, queryObj]",{"range":"88","text":"89"},[3775,3798],"[currentCursorPosition, twit]",[5733,5743],"[cache, debouncedApiSearchAndCache, queryObj]"]